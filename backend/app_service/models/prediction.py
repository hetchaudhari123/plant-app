from pydantic import BaseModel, Field, Any
from typing import Optional, Dict
from datetime import datetime, timezone, timedelta
from enum import Enum
from config.config import settings

class PredictionStatus(str, Enum):
    pending = "pending"
    completed = "completed"
    failed = "failed"




class Prediction(BaseModel):
    prediction_id: str  # UUID4 generated by backend
    model_name: str       # 
    user_id: str        # reference to User.id
    image_url: str
    status: PredictionStatus  # restricted to enum values
    prediction: Optional[str] = None
    confidence: Optional[float] = None
    raw_output: Optional[Any] = None 
    processing_time: Optional[float] = None  # in seconds
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    expires_at: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc) + timedelta(hours=settings.PREDICTION_EXPIRY_HOURS)
    )

    class Config:
        json_encoders = {
            datetime: lambda dt: dt.isoformat()
        }
