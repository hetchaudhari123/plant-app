from pydantic import BaseModel, Field
from typing import Optional, Dict
from datetime import datetime, timezone
from enum import Enum

class PredictionStatus(str, Enum):
    pending = "pending"
    completed = "completed"
    failed = "failed"


class PredictionResult(BaseModel):
    label: str
    confidence: int  # 0-100, or you can choose 0-1 if you prefer float


class Prediction(BaseModel):
    prediction_id: str  # UUID4 generated by backend
    model_id: str       # reference to Model.id
    user_id: str        # reference to User.id
    image_url: str
    status: PredictionStatus  # restricted to enum values
    result: Optional[PredictionResult] = None
    processing_time: Optional[float] = None  # in seconds
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    expires_at: Optional[datetime] = None  # e.g., 48h later

    class Config:
        json_encoders = {
            datetime: lambda dt: dt.isoformat()
        }
