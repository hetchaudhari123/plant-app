from pydantic import BaseModel, Field
from datetime import datetime, timezone
from enum import Enum
from typing import Optional

# Enum for job status
class JobStatus(str, Enum):
    pending = "pending"
    completed = "completed"
    failed = "failed"

class Job(BaseModel):
    job_id: str          # UUID4 generated by backend
    user_id: str         # reference to User.id
    prediction_id: str   # reference to Prediction.prediction_id
    model_id: str        # reference to Model.id
    status: JobStatus = JobStatus.pending
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    expires_at: Optional[datetime] = None  # e.g., 48h later

    class Config:
        json_encoders = {
            datetime: lambda dt: dt.isoformat()
        }
